to update_addbus_intention
  ; initialize 6 bus with different routes at the beginning
  if ticks = 2 [
    set addbus_intention "addinit"
  ]
  if( ticks > 2 and (addbus_intention != "add" ) )
  [
    set addbus_intention "none"
  ]
  ;other add option is in apply reply
end 

to update_desire
end 
to update_drive_intention
  if (drive_intention = "deviate")
  [
    ;we reached the end of the deviation 
    if(route_index = length(deviate_route) )
    [
      ;current_stop
      if(current_stop = -1 ) 
      [show (word "WARNING: current stop is -1 although it should be " length(deviate_route))]
      
      ;update bus_deserving_stations
      ;the bus was in deviate and its previous route has already been removed from the variable
      set bus_deserving_stations (update-bus-deserving-stations bus_deserving_stations bus_id new_fixed_route)
      
      set fixed_route new_fixed_route
      let temp_route_index position (item (length(deviate_route) - 1 ) deviate_route) new_fixed_route
      ifelse(temp_route_index = ( (length new_fixed_route) - 1) )
      [
        set route_index (temp_route_index - 1)
        set direction "RETURN"
      ]
      [
        set route_index (temp_route_index + 1)
        set direction "GO"
      ]
      set drive_intention next_deviate_intention
      if(drive_intention = "connect")
      [set color blue]
    ]
  ]
end 

;take the list of all recent messages as input 
to update_comm_intention [f_messages]
  let d_tick (ticks - disable_tick)
  let break? false ; used to simulate an if elseif elseif else behaviour 
  
  if (comm_intention = "disable" and (not break?))
  [
    if( d_tick > 15) ;1 ticks per minutes, 1440 let's say that the delay is of 15 min (since rush hours last ~2 hours)
    [
      set comm_intention "none"
    ]  
    set break? true
  ]
  if( comm_intention = "send" and (not break?))
  [
    set comm_intention "disable"
    set break? true
  ]
    let current_route -1
    if(drive_intention = "deserve" or (drive_intention = "maintain") or (drive_intention = "connect"))
    [set current_route fixed_route]
    ;we do not check for optimization if we are deviating 
    if(drive_intention = "deviate" or (drive_intention = "wait"))
    [set current_route -1]
    
  ;check if needed to drop a station
  if current_route != -1 and (drive_intention = "deserve")
  [ 
     ;check if the bus is at a station he deserves and that he is not replying to a message
     if (member? current_stop current_route) and ( (ticks - last_reply_time) > 2)
     [
         ;check for undercrowded station using the function in heuristic
         let drop check-uncrowded-station current_route bus_capacity ticks
         ;if station_id != -1 ; ie: found one 
         if drop != -1
         [
             ;calculate current heuristic
             let current_heuristic_value heuristic bus_type current_route ticks bus_deserving_stations
             ;calculate new route 
             let new_fixed_r (best-drop-station current_route drop)
             let alternative_bus_deserving_stations update-bus-deserving-stations bus_deserving_stations bus_id new_fixed_r
             let alternative_heuristic_value heuristic bus_type new_fixed_r ticks alternative_bus_deserving_stations 
             ;calculate delta heuristic 
             let delta_heuristic (alternative_heuristic_value - current_heuristic_value)
             if delta_heuristic > 0
             [
               ;set station_to_drop
               set station_to_drop drop
               set station_to_drop_heur delta_heuristic
               
               ;build message to send
               let drop_message_content build-INFORM-content "drop_station" (list station_to_drop station_to_drop_heur)
               let drop_message_id build-m-id bus_id
               let drop_message build-message bus_id drop_message_id "INFORM" drop_message_content 
               
               ;find all buses that deserve this station using bus_deserving_stations
               let buses_deserving_drop item station_to_drop bus_deserving_stations
               ;send message
               foreach buses_deserving_drop
               [
                 my-send-message ? drop_message
               ]
               set break? true
             ]
         ]
  
     ]
  ]
  
  
  if (add_bus_index != -1)
  [
    ; send an init message to the bus
    let content (build-INFORM-content "init" (list add_fixed_route add_deviate_route add_start_delay add_direction add_route_index add_desire add_drive_intention add_comm_intention add_addbus_intention add_next_deviate_intention))
    let message_id (build-m-id bus_id)
    let message (build-message bus_id message_id "INFORM" content)
    my-send-message add_bus_index message
    set add_bus_index  -1
  ]
  if( comm_intention = "none" and (not break?))
  [
    
    if current_route != -1
    [
      let break2? false
      ;only check station if we are at the current station
      let check_stations? (member? current_stop current_route) 
      ;only check line if we are at the first of last station of main_route (=fixed_route)
      let check_line? ( (current_stop = (first current_route) ) or (current_stop = (last current_route)) )
      
      ;OVERCROWDED LINE
      if(check_line? and (break2? = false) )
      [
        let overcrowded_line? (check-overcrowded-line current_route bus_capacity)
        let delay_fine? false 
        if (overcrowded_line? != false)
        [
          set delay_fine?  (line_delay_ok overcrowded_line overcrowded_line? ticks)
        ]
        
        ;notify all stop bus they can drive again 
       if(drive_intention = "maintain")
        [
          ;find all buses on subroute 
          let bus_on_subline (bus-on-subline current_route bus_deserving_stations)
          let mess_content ( build-inform-content "unwait_deserve" (list "") )
          let mess_id (build-m-id bus_id)
          let mess (build-message bus_id mess_id "INFORM" mess_content)
          foreach bus_on_subline
          [
            my-send-message ? mess

          ] 
          ;change own intention to deserve
          set drive_intention next_maintain_intention
          set break2? true
        ]
        if( (drive_intention = "connect") and(not break2?))
        [
          ;simulate that the bus sent a request for new bus 
          set last_sent_request "connect ask for bus"
          set last_request_time ticks 
          set comm_intention "disable"
          set disable_tick ticks
        ]
        ;
        if(delay_fine? = true and (not break2?) and (drive_intention != "connect"))
        [     
          set message_receivers (list)
          set message_to_send "" 
          
          ;Send message to every bus does not already have all of my stop in his line
          set message_receivers (get_buses_with_different_route current_route bus_deserving_stations)
          
          let treshold 0 ; if the delta heuristic of the bus is >0 then the bus can respond to the request
          let message_cont (build-REQUEST-content "overcrowded_line" current_route treshold)
          let mess_id (build-m-id bus_id)
          set message_to_send (build-message bus_id mess_id "REQUEST" message_cont)
          set last_sent_request message_to_send
          
          ;show word (word (word (word "send request" "") message_to_send) " " ) ticks
          
          ;memorize that a request was sent for this line 
          ;first: clean var
          set overcrowded_line (clean_delay_var overcrowded_line ticks)
          ;then add this line to the list 
          set overcrowded_line lput (list current_route ticks) overcrowded_line
        
          set break2? true
        ]
      ]
      ;OVERCROWDED STATION
      if(check_stations? and (break2? = false) and (drive_intention != "connect"))
      [
        let overcrowded_station? (check-overcrowded-station current_stop bus_capacity current_route)
        let delay_fine? false 
        if (overcrowded_station? != false)
        [
          set delay_fine?  (station_delay_ok overcrowded_station overcrowded_station? ticks)
        ]
        if (delay_fine? = true and (not break2?))
        [
          
          set message_receivers (list)
          set message_to_send "" 
          
          ;send message to buses that don't have this stop in their route
          set message_receivers (getBuses_without_this_stop current_stop ) 
      
          let treshold 0 ; if the delta heuristic of the bus is >0 then the bus can respond to the request
          let message_cont (build-REQUEST-content "overcrowded_station" current_stop treshold)
          let mess_id (build-m-id bus_id)
          set message_to_send (build-message bus_id mess_id "REQUEST" message_cont)
          set last_sent_request message_to_send
          
          ;show word (word (word (word "send request" "") message_to_send) " " ) ticks
          
          ;memorize that a request was sent for this station 
          ;first: clean var
          set overcrowded_station (clean_delay_var overcrowded_station ticks)
          ;then add this line to the list 
          set overcrowded_station lput (list current_stop ticks) overcrowded_station
          set break2? true
          
          ;memorize the tick :
          set last_request_time ticks
        ]
      ]

      ;UNCROWDED LINE
      let uncrowded_line? (check-uncrowded-line current_route bus_capacity )
      ;ask the other bus if can stop
      if(uncrowded_line? != false and (drive_intention = "deserve" or (drive_intention = "maintain") or (drive_intention = "connect")) and (not break2?) )
      [
        set message_receivers (bus-on-superline bus_id current_route bus_deserving_stations)
        let message_cont (build-REQUEST-content "wait_deserve" 0 0);need no value and no threshold
        let mess_id (build-m-id bus_id)
        set message_to_send (build-message bus_id mess_id "REQUEST" message_cont)
        set last_sent_request message_to_send
        
        set break2? true
        set last_request_time ticks
      ]

      
      ;if we entered in one of the previous if, change behaviour to send and set disable_ticks
      if( break2? = true) 
      [
        set comm_intention "send"
        set disable_tick ticks
      ]
      set break? true
    ]
  ]
  
end 

;Update all the bus intention depending of the message 
to update-message-intentions [f_messages]
  let all_filtered (filter-message f_messages)
  let m_inform (item 0 all_filtered)
  let m_request (item 1 all_filtered)
  let m_reply (item 2 all_filtered)
  let m_action (item 3 all_filtered) 
  
  applyInform m_inform
  
  if(addbus_intention != "init")
  [
    ;Tick 0: sent a reply
    ;Tick 1: receiver read reply and send if necessary action
    ;Tick 2: read action if necessary 
    if( (ticks - last_reply_time ) > 2)
    [applyRequest m_request]
    
    applyReply m_reply f_messages
    
    
    foreach m_action
    [
      let content get-content ?
      let info (read-ACTION-content content false)
      applyAction (item 0 info) (item 1 info)
    ]
  ]
  
end

to applyInform[m_inform]
  ;create list to memorize the delta heuristic for drop
  let drop_deltas (list)
  ;create list (same order as previous one! ) to memorize the bus_id for drop
  let drop_IDs (list)

  foreach m_inform
  [ 
    ;parse message and get a list where the first element is the task name, all the following one are the var values AS A STRING ; (use "read-from-string str" to get an integer/list ... of the list 
    let content get-content ?
    let list_infos (read-INFORM-content content)
    let task_name (item 0 list_infos)
    if task_name = "init"
    [
      set fixed_route read-from-string(item 1 list_infos)
      set new_fixed_route fixed_route
      set deviate_route read-from-string(item 2 list_infos)
      set start_delay read-from-string(item 3 list_infos)
      set direction (item 4 list_infos)
      set route_index read-from-string(item 5 list_infos)
      set desire (item 6 list_infos)
      set drive_intention (item 7 list_infos)
      set comm_intention (item 8 list_infos)
      set addbus_intention (item 9 list_infos)
      set next_deviate_intention (item 10 list_infos)
      if(drive_intention = "deserve" or (drive_intention = "connect"))
      [set bus_deserving_stations (update-bus-deserving-stations bus_deserving_stations bus_id fixed_route)]
    ] 
    if task_name = "unwait_deserve" and (addbus_intention != "init") and (drive_intention = "wait")
    [
      ;set intention to deserve
      set drive_intention next_wait_intention
    ]

    if (task_name = "drop_station") and ( read-from-string (item 1 list_infos) = station_to_drop) and (addbus_intention != "init")
    [ 
      ;add bus id to list of bus_id_drop
      set drop_IDs lput (get-sender ?) drop_IDs
      ;add d_heuristic to list of d_heur_drop 
      set drop_deltas lput read-from-string(item 2 list_infos) drop_deltas
    ]
  ]
  
      ;if at least one bus does not want to drop the station I want to drop
      ;+1 comes from the fact that you have to count yourself
      ifelse (station_to_drop != -1) and ((length(drop_IDs) + 1) < length(item station_to_drop bus_deserving_stations))
      [
        ;DROP STATION
        ;get-next-direction-index bus_id next (after fixed route)

        let n_fixed_route (best-drop-station fixed_route station_to_drop)
        let n_station (item route_index fixed_route)
        
        set deviate_route (list) 
        if(not member? next_stop fixed_route)
        [
          show "WARNING: no next stop while dropping station"
        ]
        ifelse(member? next_stop n_fixed_route)
        [
          set deviate_route lput next_stop deviate_route
        ]
        [
          ;finish his way to stop and then go to next stop
          set deviate_route lput next_stop deviate_route
          let n_stop_index (item 1 (get-next-direction-index bus_id true))
          set deviate_route lput (item n_stop_index fixed_route) deviate_route
        ]
        set direction "GO"
        set route_index 0
        set drive_intention "deviate"
        set next_deviate_intention "deserve"
        set new_fixed_route n_fixed_route  
        ;: compute new bus_deserving_station
        set bus_deserving_stations (update-bus-deserving-stations bus_deserving_stations bus_id fixed_route)
        
        set station_to_drop -1
        set station_to_drop_heur 0 
      ]
      ;else
      [
        ;add my id to the list and my d_heur to the list using the one I memorized in station_to_drop_heur
        set drop_IDs lput bus_id drop_IDs 
        set drop_deltas lput station_to_drop_heur drop_deltas
        ;compute min d_heuristic and corresponding bus_id 
        let min_idx position (min drop_deltas) drop_deltas
        let min_ID (item min_idx drop_IDs)
        ;if I am not the min, I can drop a station:
        if min_ID != bus_id
        [
          ;DROP STATION
          ;get-next-direction-index bus_id next (after fixed route)
          let n_fixed_route (best-drop-station fixed_route station_to_drop)
          let n_station (item route_index fixed_route)
          
          set deviate_route (list) 
          if(not member? next_stop fixed_route)
          [
            show "WARNING: no next stop while dropping station"
          ]
          ifelse(member? next_stop n_fixed_route)
          [
            set deviate_route lput next_stop deviate_route
          ]
          [
            ;finish his way to stop and then go to next stop
            set deviate_route lput next_stop deviate_route
            let n_stop_index (item 1 (get-next-direction-index bus_id true))
            set deviate_route lput (item n_stop_index fixed_route) deviate_route
          ]
          set direction "GO"
          set route_index 0
          set drive_intention "deviate"
          set next_deviate_intention"deserve"
          set new_fixed_route n_fixed_route  
          ;: compute new bus_deserving_station
          set bus_deserving_stations (update-bus-deserving-stations bus_deserving_stations bus_id fixed_route)
          
          set station_to_drop -1
          set station_to_drop_heur 0 
        ]
      ]
end

to applyRequest[m_request]
  let heuristics_dvalue -1 ; store the gain/loss in heuristic by the change
  let corresponding_mess -1 ; corresponding message to the heuristic_dvalue 
  let corresponding_task_name  ""
  
  let current_route -1
  if(drive_intention = "deserve" or (drive_intention = "maintain") or( drive_intention = "connect"))
  [set current_route fixed_route]

  if(drive_intention = "deviate" or (drive_intention = "wait"))
  [set current_route -1]
    
  if current_route != -1  
  [
    foreach m_request
    [
      let content get-content ?
      let info ( read-REQUEST-content content )
      let var_name (item 0 info)
      let var_val (item 1 info)
      let treshold (item 2 info)
      
      let break? false
      
      if(var_name = "overcrowded_line" and (break? = false)and (drive_intention != "connect") and (next_maintain_intention != "connect") )
      [
        ;wait for every bus to be on the line 
        if( ticks > 2 and ((not-abandoning-station current_route var_val) = true))
        [
          ;compute the cost of reaching the new route
          let next_index -1
          let dist compute-distance-to-stop xcor ycor (item route_index current_route)
          ;estimate at which stop the bus would be in 2 ticks 
          ifelse ( ( dist < 2) )
          [set next_index (item 1 (get-next-direction-index bus_id true))]
          [set next_index route_index]
          let next_s (item next_index current_route)
          let dev_route (find-way-to-route next_s var_val)
          let dev_cos (travel-gain bus_type dev_route)
          
          ;compute the heuristic for deserving the next route 
          let new_bus_deserv (update-bus-deserving-stations bus_deserving_stations bus_id var_val )
          let new_heur (heuristic bus_type var_val ticks new_bus_deserv)
          ;compute current heuristc 
          let cur_heur (heuristic bus_type current_route ticks bus_deserving_stations)
          
          ;compute the difference between heuristic
          let d_heur ( (new_heur + dev_cos) - (cur_heur) )
          
          if( d_heur > treshold and (d_heur > heuristics_dvalue) )
          [ 
            ;show word "reply to overcrowded line: " ticks
            ;check if we are not alredy on the new route
            if (current_stop = (first dev_route))
            [
              set dev_route (remove-item 0 dev_route)
            ]
            ifelse(length(dev_route) = 0)
            [
              set new_drive_intention "deserve"
              set deviate_route []        
            ]
            [
              set new_drive_intention "deviate"
              set next_deviate_intention drive_intention
              set deviate_route dev_route
            ]
            ;show (word word word word dev_route " " drive_intention " " new_drive_intention)
            set new_fixed_route var_val
            set heuristics_dvalue d_heur 
            set corresponding_mess ? 
            set corresponding_task_name var_name
          ]
          ;memorize that a request was sent for this line 
          ;first: clean var
          set overcrowded_line (clean_delay_var overcrowded_line ticks)
          ;then add this line to the list 
          set overcrowded_line lput (list var_val ticks) overcrowded_line
        ]
        set break? true
      ]
      if(var_name = "overcrowded_station" and (break? = false)and (drive_intention != "connect") and (next_maintain_intention != "connect") )
      [
        ;wait for every bus to be on the line 
        if( ticks > 2 and (length(current_route) < 8 )) 
        [
          ;show word "reply to overcrowded station: " ticks
          ;compute route induced by the addition of the overcrowded station to current_route
          let new_route (best-route var_val current_route)
          ;compute new and previous gain
          let new_bus_deserv (update-bus-deserving-stations bus_deserving_stations bus_id new_route )
          let new_heur  (heuristic bus_type new_route ticks new_bus_deserv)
          let cur_heur (heuristic bus_type current_route ticks bus_deserving_stations) 
          let d_heur (new_heur - cur_heur)
          if( d_heur > treshold and (d_heur > heuristics_dvalue))
          [
            set new_drive_intention "deserve"
            set deviate_route []
            set new_fixed_route new_route
            set heuristics_dvalue d_heur 
            set corresponding_mess ? 
            set corresponding_task_name var_name
          ]
          
          ;memorize that a request was sent for this station 
          ;first: clean var
          set overcrowded_station (clean_delay_var overcrowded_station ticks)
          ;then add this line to the list 
          set overcrowded_station lput (list var_val ticks) overcrowded_station
        ]
        set break? true
      ]
      if(var_name = "wait_deserve" and (break? = false))
      [
        if(ticks > 2)
        [
          let allow_stop false
          if(drive_intention != "wait") ; and not sent request not a long ago
          [
            set allow_stop true
          ]
          ;optimization: only reply if positive reply
          if(allow_stop)
          [
            let mess_content (build-reply-content var_name allow_stop)
            let mess (build-message bus_id (get-m-id ?) "REPLY" mess_content)
            my-send-message (get-sender ?) mess
            ;memorize the tick :
            set last_reply_time ticks
          ]
          
        ]
        set break? true
      ]
      
      
      if(break? = false and (drive_intention != "connect") and (next_maintain_intention != "connect") )
      [
        show( word (word "WARNING: the following variable name: " var_name) " was not handled in applyRequest")
      ]
    ]
    

    if(heuristics_dvalue != -1)
    [
     
      ;Send message to bus
      let message_id (get-m-id corresponding_mess)
      let sender_id  (get-sender corresponding_mess)
      let reply_message (build-message bus_id message_id "REPLY" (build-REPLY-content corresponding_task_name heuristics_dvalue))
      
      ;send the message 
      my-send-message sender_id reply_message
      ;show word (word (word (word "send reply" best_sender_id) reply_message) " " )ticks
      
      ;memorize the tick :
      set last_reply_time ticks
    ]
  ]
end


to applyReply[m_reply f_messages]
  
  let gain 0
  ; if no one reply, check if we should ask for a new bus 
  let expect_task_name "" 
  if( last_sent_request != "")
  [
    ifelse(drive_intention = "connect" or (next_maintain_intention = "connect") )
    [set expect_task_name "ask for bus"]
    [set expect_task_name(item 0 read-REPLY-content(get-content last_sent_request))]
  ]
  ;ASK FOR NEW BUSES 
  if(length (m_reply) = 0 and ( (ticks - last_request_time) = 2) and (drive_intention = "deserve" or (drive_intention = "connect") ) and (expect_task_name != "wait_deserve" and (expect_task_name != "") ) )
  [
    if(drive_intention = "connect")
    [set last_sent_request ""]
    ;In order to find to good size, estimate the expected number of people to pick on a full route loop
    ;Time to do your route loop: mean_time_between_stop * number_stop
    let expected_route_time 6.32 * (length(fixed_route) - 1) 
    ;expected number of people on the route
    let number_people_expected 0
    ;loop over all stations to get expected people for next hour
    let nb_hour (floor( expected_route_time / 60))
    let nb_fract_hour (expected_route_time / 60) mod 1
    if (nb_fract_hour != 0) 
    [set nb_hour (nb_hour + 1)]
    let i 0
    while [i < nb_hour]
    [
       ifelse ( i = (nb_hour - 1))
       [set number_people_expected ((number_people_expected + compute-expected-people fixed_route (ticks + i * 60) bus_deserving_stations) * nb_fract_hour)]
       [set number_people_expected ((number_people_expected + compute-expected-people fixed_route (ticks + i * 60) bus_deserving_stations))]
        
        set i (i + 1)
    ]
    let break? false
    
    set add_size 3
    if ( number_people_expected < 13 and (break? = false) )
    [
      set add_size 1
      set break? true
    ]
    if ( number_people_expected < 61 and (break? = false) )
    [
      set add_size 2
      set break? true
    ]

    let nb_hour_gain (ceiling( (1440 - ticks)  / 60)); remaining number of entire hour before end of run + 1 if number of minutes is non nul
    
    set gain set-gain add_size
    
    let init_add_size add_size
    let break2? false
     
    while [init_add_size > 0 and break2? = false]
    [
      set i 0
      while [i < nb_hour_gain]
      [
        let h_gain (heuristic init_add_size fixed_route (ticks + i * 60) bus_deserving_stations)
        set gain (gain + h_gain)
        set i (i + 1)
        ;if(ticks > 360) 
        ;[show word "          " (h_gain)]
      ]
      ifelse(gain > 0) [set break2? true]
      [
        set init_add_size (init_add_size - 1)
        set gain set-gain init_add_size
      ]
      if(init_add_size = 0) [set break2? true]
    ]
    if(init_add_size != 0)
    [set add_size init_add_size]
    
   ; show word word add_size " " gain
   
    if(gain > 0 and (bus_number < 200))
    [
      ;set the init parameter of the bus 
      set addbus_intention "add"
      set add_fixed_route fixed_route
      ifelse member? 3 fixed_route 
      [set add_deviate_route (list)]
      [set add_deviate_route find-way-to-route 3 fixed_route]
      ;check if we are not already on the new route knowing that we start at stop 3
      if (length(add_deviate_route) > 0 and (3 = (first add_deviate_route)))
      [
        set add_deviate_route (remove-item 0 add_deviate_route)
      ]
      set add_start_delay 0
      ifelse member? 3 fixed_route 
      [
        let ind position 3 fixed_route
        ifelse(ind < length(fixed_route) - 1)
          [
            set add_route_index (ind + 1)
            set add_direction "GO"
          ]
          [
            set add_route_index (ind - 1)
            set add_direction "RETURN"
          ]
      ]
      [
        set add_route_index 0
        set add_direction "GO"
      ]
      set add_desire "deserve"
      ifelse(length(add_deviate_route) > 0)
      [
        set add_drive_intention "deviate"
        set add_next_deviate_intention drive_intention
      ]
      [set add_drive_intention "deserve"]
      set add_comm_intention "none"
      set add_addbus_intention "none"
    ]
  ]
  let heuristics_dvalue (list) ; store the gain/loss in heuristic by the change
  let can_wait  false
  let bus_maintain_message ""
  foreach m_reply
  [
    let break3? false 
    let content get-content ?
    let l_content ( read-REPLY-content content )
    let task_name (item 0 l_content)
    let dvalue (item 1 l_content)
    if( (task_name = "overcrowded_line" or (task_name = "overcrowded_station")) and (break3? = false) )
    [
      set heuristics_dvalue lput dvalue heuristics_dvalue
      set break3? true
    ]
    if(task_name = "wait_deserve")
    [
      if(dvalue = true)
      [
        set can_wait true
        set bus_maintain_message ?
      ]
      set break3? true
    ]
    
    if (break3? = false)
    [
      show word word "WARNING reply of name " task_name " has not been handled in apply reply"
    ]
    
  ]
  if( (length heuristics_dvalue) > 0 )
  [
    ;find best reply to answer to 
    let best_dvalue max heuristics_dvalue
    let best_dvalue_index position best_dvalue heuristics_dvalue
    
    ;find best reply message and get some infos 
    let best_m (item best_dvalue_index m_reply)
    let message_id (get-m-id best_m)
    let best_sender_id (get-sender best_m)
    
    let original_message last_sent_request 
    let original_content (read-REQUEST-content (get-content original_message))
    let var_name (item 0 original_content)
    let var_value (item 1 original_content)
     
    ;Resend original message to the bus but this time as an action: notify him that he has to do the changes he did for the computation of delta heuristic
    let action_message (build-message bus_id message_id "ACTION" (build-ACTION-content var_name var_value)) 
    my-send-message best_sender_id action_message
    ;show word (word "send action " best_sender_id) action_message
  ]
  if(can_wait = true)
  [
    if(next_wait_intention != "connect" and next_wait_intention != "deserve")
    [
      ifelse(drive_intention = "connect" or drive_intention = "deserve")
         [set next_wait_intention drive_intention]
         [
           if(drive_intention = "maintain")
           [set next_wait_intention next_maintain_intention]
         ]
    ]
    set drive_intention "wait"
    ;send an action to one of the sender to ask to switch from "deserve" to "maintain"
    let mess_content (build-action-content "wait_deserve" "maintain") 
    let sender (get-sender bus_maintain_message)
    let m_id (get-m-id bus_maintain_message)
    let mess (build-message bus_id m_id "ACTION" mess_content)
    my-send-message sender mess 
  ]
end

to applyAction[var_name var_value]
    let break? false
    if(var_name = "overcrowded_station")
    [
      ;show word word word word word "deviate to overcrowded station !!!!!: " (item route_index fixed_route) " " fixed_route " : " ticks
      set drive_intention new_drive_intention
      ;deviate route has already been set 
      
      ;update bus_deserving_stations
      ;the bus was will go in deviate: only remove previous route
      set bus_deserving_stations (update-bus-deserving-stations bus_deserving_stations bus_id new_fixed_route)
     
      ;direction stays the same 
      ;set the route index to the correct value
      set route_index (position (item route_index fixed_route) new_fixed_route)
      set fixed_route new_fixed_route
      
     ;show word word (item route_index new_fixed_route) " " new_fixed_route 
            
      set break? true
    ]
    if(var_name = "overcrowded_line")
    [
      let dist compute-distance-to-stop xcor ycor (item route_index fixed_route)
      ;show word word word word word word word word word word "deviate to overcrowded line !!!!!" fixed_route " " current_stop " " (item route_index fixed_route) " " deviate_route var_value ": " ticks
      set drive_intention new_drive_intention
      ;deviate route has already been set 
      
      ;update bus_deserving_stations
      ;the bus was will go in deviate: only remove previous route
      set bus_deserving_stations (update-bus-deserving-stations bus_deserving_stations bus_id [])
      
      ifelse(length(deviate_route) != 0)
      [
        set route_index 0 ; go to first stop of deviate route
        set direction "GO"
      ]
      [      
        ;keep same values
      ]

      set break? true
    ]
    if(var_name = "wait_deserve")
    [
      if(next_maintain_intention != "connect" and next_maintain_intention != "deserve")
      [
         ifelse(drive_intention = "connect" or drive_intention = "deserve")
         [set next_maintain_intention drive_intention]
         [
           if(drive_intention = "wait")
           [set next_maintain_intention next_wait_intention]
         ]
      ]
     
      set drive_intention var_value
      set break? true  
    ]
    if(break? = false)
    [
      show( word (word "WARNING: the following variable name: " var_name) " was not handled in applyReply")
    ]

end