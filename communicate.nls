to-report split[string separator]
  ;read-from-string to interpret value
  let res (list)
  let _word ""
  let ind 0 
  let stop? (length(string) = 0)
  while [stop? = False]
  [
    let char (item ind string)
    ifelse(char = separator)  
    [
      set res lput _word res
      set _word ""
    ]
    [
      set _word word _word char
    ]
    set ind (ind + 1)
    if(ind >= length(string))
    [
      set res lput _word res
      set stop? True  
    ]
  ]
  report res
end

to-report build-message[sender-id message-id action-type content]
  let res ""
  set res word res sender-id  
  set res word res "/"
  set res word res message-id
  set res word res "/"
  set res word res action-type
  set res word res "/"
  set res word res content

  report res
end

to-report read-message[string]
 report (split string "/")
end

to-report get-sender[string]
  let m (read-message string)
  report read-from-string (item 0 m)
end
to-report get-m-id[string]
  let m (read-message string)
  report (item 1 m)
end
to-report get-action-type[string]
  let m (read-message string)
  report (item 2 m)
end
to-report get-content[string]
  let m (read-message string)
  report (item 3 m)
end
;build the message id as "sender_id-ticks"
to-report build-m-id[sender_bus_id]
  report (word sender_bus_id (word "-" ticks))
end
;break an message id to retrieve the send time 
to-report get-sender-information[mess]
  let m (read-message mess)
  let mess_id (get-m-id mess)
  let split_m  (split mess_id "-")
  report (list (read-from-string (item 0 split_m)) (read-from-string(item 1 split_m)) )
end

;retrieve message that are <= 3 ticks from current one. This is based on the following sending model: 
;ticks = 20 // bus 1 send request to bus 2
;ticks = 21 // bus 2 read message and reply to bus 2
;ticks = 22 // bus 1 read reply and decide of action. Then send message to bus 2
;ticks = 23 // bus 2 read instruction and change its behaviour

;retrieve all message such that there ticks are < time_tol (recommended value is 4)
to-report retrieve-recent[_inbox _tick time_tol]
  set _inbox reverse _inbox
  let l (list)
  ;message in inbox is [tick, sender, message]
  let stop? false
  let ind 0
  while[ind < length(_inbox) and (stop? = false)]
  [
    let m (item ind _inbox)
    let m_tick (item 0 m)
    ifelse ( (_tick - m_tick ) < time_tol )
    [
      set l lput (item 2 m) l  
      set ind (ind + 1)  
    ]
    [
      ;We are in the older message part, we can break
      set stop? true  
    ]

  ]
  report l
end
;filter the message by action type and keep only the relevant ones 
to-report filter-message[messages]
  let l_request (list)
  let l_reply (list)
  let l_action (list)
  let l_inform (list)
  foreach messages
  [
    let m ?
    let m_action_type (get-action-type m)
    let sender_info (get-sender-information m)
    let sent_tick  (item 1 sender_info)
    let break? false
   
    if(m_action_type = "INFORM")
    [
      if( (ticks - sent_tick) = 1)[
        set l_inform lput ? l_inform
        ]
      set break? true
    ]
    if(m_action_type = "REQUEST")
    [
      if( (ticks - sent_tick) = 1)[
      set l_request lput ? l_request 
      ] 
      set break? true
    ]
    if(m_action_type = "REPLY")
    [
      if( (ticks - sent_tick) = 2)[
      set l_reply lput ? l_reply 
      ]
      set break? true
    ]
    if(m_action_type = "ACTION")
    [
      if( (ticks - sent_tick) = 3)[
      set l_action lput ? l_action  
      ]    
      set break? true 
    ]
    if(break? = false)
    [
      show ( word (word "WARNING: message action type is unknown: " m_action_type) (". Try INFORM / REQUEST / REPLY instead"))
    ]
    
  ]
  report (list l_inform l_request l_reply l_action)
end
 
;build the content so that the bus apply  set belief_variable_name value
to-report build-INFORM-content[task_name list_var_value]
  let res task_name
  foreach list_var_value
  [
    set res (word( word res ";") ?)
  ]
  report res
end
to-report build-REQUEST-content[var_name var_value treshold]
  report word (word (word (word var_name ";") var_value) ";") treshold
end
to-report build-REPLY-content[value]
  report word value ""
end
to-report build-ACTION-content[var_name var_value]
  report word (word var_name ";") var_value
end
to-report read-INFORM-content[mess]
  let m (split mess ";" )
  let res (list)
  let index 0
  foreach m
  [
      ifelse(index = 0)
      [
        set res lput ? res
      ]
      [
        set res lput (read-from-string ?) res
      ]
      set index (index + 1)
  ]
  report res
end
to-report read-REQUEST-content[mess]
  let m (split mess ";" )
  let var_name (item 0 m)
  let var_value (read-from-string (item 1 m))
  let treshold (read-from-string (item 2 m))
  report (list var_name var_value treshold)
end

to-report read-REPLY-content[mess]
  report (read-from-string mess)
end

to-report read-ACTION-content[mess]
  let m (split mess ";" )
  let var_name (item 0 m)
  let var_value (read-from-string (item 1 m))
  report (list var_name var_value)
end
;execute the following instruction : set interpreted(var_name) var_value
to execute-set[var_name operator var_value]
  let break? false
  if(var_name = "overcrowded_station")
  [
    ;can only be set
    if (operator != "=")
    [show word (word "WARNING: wrong operation " operator) " on overcrowded_station in execute-set"] 
    set overcrowded_station var_value
    set break? true
  ]
  if(var_name = "overcrowded_line")
  [
     ;can only be set
    if (operator != "=")
    [show word (word "WARNING: wrong operation " operator) " on overcrowded_line in execute-set"] 
    set overcrowded_station var_value
    set break? true
  ]
  if(break? = false)
  [
    show( word (word "WARNING: the following variable name: " var_name) " was not handled in execute-set")
  ]
end
to my-send-message[bus-id message]
  let action-type (get-action-type message)
  let allow-send? ( not ( (action-type = "INFORM" or (action-type = "REQUEST") ) and (comm_intention = "disable") ))
  ifelse (allow-send?)
  [
    send-message bus-id message
  ]
  [
     show ("WARNING: bus trying to send an INFORM or REQUEST message but its commnication intention is disabled. Try using REPLY/ACTION instead to reply to an existing message or wait for the timeout." )
  ]
end