;usefull functions
to-report equal-route [route1 route2]
  if((length route1) != (length route2))
  [report false]
  let i 0
  foreach(route1)
  [
    if(? != (item i route2))
    [report false]
    set i (i + 1)
  ]
  report true  
end

;check if all stations of route1 or in route2
to-report equal-route-stops[route1 route2]
  foreach(route2)
  [
     if(not (member? ? route1) )
     [report false]
  ]
  report true
end
to-report bus-on-superline[_busid bus_route _bus_deserving_station]
  let same_route_bus (list)
  let first_loop? true
  foreach bus_route
  [
    if(? < 0)
    [report (list)]
    ;memorize buses that so far have the same route 
    let temp (list)
    ; get bus id list at this stop
    let bus_deserving_station_ids (item ? _bus_deserving_station)
    foreach(bus_deserving_station_ids)
    [
        ifelse(first_loop? = true)
        [
          set temp lput ? temp
        ]
        [
          ;the bus needed to be to the previous list to ensure the fact that ALL the stops are the same 
          if(member? ? same_route_bus)
          [set temp lput ? temp]
        ]
        ;actualize the same_route_bus 
    ]
    set first_loop? false
    set same_route_bus temp
  ]
  if(member? _busid same_route_bus)
  [set same_route_bus remove-item (position _busid same_route_bus) same_route_bus]
  report same_route_bus
end

;report the list of buses where all their deserved station is in my route
to-report bus-on-subline[route _bus_deserving_station]
  let res (list)
  let diff_bus_route (list) ; buses with a route that contains at least one station that is not in route 
  let all_stops [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]
  foreach all_stops
  [
    ;find buses that have a stop that is not in route 
    if(not (member? ? route))
    [
      ;find all buses deserving station ? 
      let bus_deserving_station_ids (item ? _bus_deserving_station)
      foreach(bus_deserving_station_ids)
      [
        ;add the bus to the list of not already done
        if(not (member? ? diff_bus_route))
        [set diff_bus_route lput ? diff_bus_route]
      ]
    ]
  ]
  ; find the opposite of diff_bus_route
  foreach bus_id_list
  [
    if(not (member? ? diff_bus_route))
    [set res lput ? res]
  ]

  report res
end

to-report compute-route-length [route]
  let leng 0 
  let prev_stop -1
  foreach route
  [
    if( prev_stop != -1)
    [set leng (leng + (my-get-distance prev_stop ?) )]
    set prev_stop ?
  ]
  report leng
end

to-report get-next-direction-index[b_id get_next_next]
  let next_direction -1
  let next_index  -1
  ;WARNING, we only use the ask buses because we can not give the current bus of the "to procedure" as parameter
  ask buses with[bus_id = b_id]
  [
    ;default value
    set next_direction direction 
    set next_index route_index 
    
    ifelse(next_stop = -1 or (next_stop = false) or (get_next_next = true))
    [
      if(drive_intention = "deserve" or (drive_intention = "maintain") or (drive_intention = "connect") )
      [
        let break? false
        ;update index 
        if(direction = "GO" and (break? = false)) 
        [
          ;if we are at the last top in GO direction
          ifelse(route_index = (length(fixed_route)) - 1)
          [
            set next_direction "RETURN"
            set next_index (route_index - 1)
          ]
          [
            set next_index (route_index + 1)]
            set break? true
          ]

        if(direction = "RETURN" and (break? = false)) 
        [
          ;if  we are at the last top in RETURN direction
          ifelse(route_index = 0)
          [
            set next_direction "GO"
            set next_index (route_index + 1)
          ]
          [
            set next_index (route_index - 1)]
            set break? true
          ]
      ]
      
      if(drive_intention = "deviate")
      [
        set next_index (route_index + 1)
      ]
    ]
    [set next_index route_index]
    
  ]
  report (list next_direction next_index )
end

to-report station_delay_ok [station_delays station_check _ticks]
  foreach station_delays
  [
    if( (item 0 ?) = station_check)
    [
      if ( ( _ticks -(item 1 ?)) < message_overcrow_delay)
      [
        report false
      ]
    ]
  ]
  report true
end 

to-report line_delay_ok [line_delay line_check _ticks]
  foreach line_delay
  [
    if( equal-route (item 0 ?) line_check)
    [
      if ( ( _ticks -(item 1 ?)) < message_overcrow_delay)
      [
        report false
      ]
    ]
  ]
  report true
end

to-report clean_delay_var [var _ticks]
  let index_remove (list)
  foreach var
  [
    if ( ( _ticks -(item 1 ?)) < message_overcrow_delay)
    [
        set index_remove lput ? index_remove
   ]
  ]
  
  foreach index_remove
  [
    let index (position ? var)
    set var remove-item index var 
  ]
  report var
end

; add each element of addList to the original
to-report update-bus-deserving-stations[original _bus_id new_route]
  let added_station (list); keep track of station added
  
  ;remove all station deserved by this bus
  let ind 0
  foreach original
  [
    if(member? _bus_id  ? ) 
    [
      ;remove its id from this station
      let station_list ? 
      let item_index position bus_id station_list
      let new_station_list (remove-item item_index station_list)
      set original (replace-item ind  original new_station_list)
    ]
    set ind (ind + 1 )
  ]
  foreach new_route
  [
    if(not (member? ?  added_station) ) 
    [
       ;retrieve the station list
      let station_list (item ? original)
      ;add its id from this station
      let new_station_list (lput  _bus_id station_list)
      set original (replace-item ?  original new_station_list)
      set added_station lput ? added_station
    ]

  ]
  report original
end

to-report my-get-distance[bs1 bs2]
  ifelse bs1 = bs2
  [report 0]
  [report get-distance bs1 bs2]
end

to-report get_buses_with_different_route[bus_route _bus_deserving_station]
  let res bus_id_list
  let same_route_bus (bus-on-superline bus_id bus_route _bus_deserving_station)
  ;remove buses that have the same route 
  foreach same_route_bus
  [
    let index (position ?  res)  
    set res (remove-item index res)
  ]
  report res
end

to-report getBuses_without_this_stop[bus_stop]
  let res bus_id_list
  let bus_deserving_station_ids (item bus_stop bus_deserving_stations)
  foreach bus_deserving_station_ids
  [
    let index (position ?  res)  
    set res (remove-item index res)
  ]
  report res
end

to-report compute-distance-to-stop[bus_x bus_y next_stop_id]
  let res 0
  let nsx 0
  let nsy 0
  ask bus_stop next_stop_id [
      set nsx xcor
      set nsy ycor
    ]
  set res sqrt (((nsx - bus_x) ^ 2) + ((nsy - bus_y) ^ 2))
  report res
end

to-report set-gain[bus_add_size]
  let gain 0
  if bus_add_size = 1 [set gain  6000 / -1250000]
  if bus_add_size = 2 [set gain  12000 / -1250000]
  if bus_add_size = 3 [set gain  20000 / -1250000]
  report gain
end

to-report drop-for-connection [current_station destination current_bus_id _bus_deserving_station]
;drop a passenger at a station if he can take another bus that can drive him to its destination
;report true if should drop, false otherwise
let should_drop? false
foreach (item current_station _bus_deserving_station)
[
  ;check buses that go through current_station and destination
  if(member? ? (item destination _bus_deserving_station))
  [
    if(? = current_bus_id)
    [report false]
    set should_drop? true
  ]
]
report should_drop?
end

;function to test if there is a bus connecting directly those two stations
to-report connecting-stations [station1 station2]
  report (length(bus-on-superline -1 (list station1 station2) bus_deserving_stations) > 0)
end