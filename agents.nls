__includes [ "shortest-route.nls" "communicate.nls" "behaviour.nls" "heuristics.nls" "utilities.nls"]
buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  fixed_route     ; Route that buses will follow 
  direction       ; String: "GO" for normal route (read fixed_route from left to right) or "RETURN" (read table from right to left)
  route_index     ; Counter to keep track of the current index of the fixed_route where the bus is  
  bus_capacity    ; Keep track of maximum possible number of person
  travelled_distance    ; Distance that is travelled by bus 
  bus_cost        ; Bus cost
  
  ;Behavioural variables 
  desire          ; Can be "deserve" (deserve its line) "maintain" (assure that rarely used station are deserved) "connect" (assure connections between several lines)
  addbus_intention; Can be "addinit"(add buses at the beginning) "add" (add bus during runtime) "none" 
  drive_intention ; Can be "wait"(do not move) "deserve"(deserve its own line) "maintain" (deserve a line but remember that some bus are in wait intention in it) "deviate" "connect"
  comm_intention  ; Can be "send"(send a message) "disable" (can't send message REQUEST or INFORM) "none" (do nothing)
  message_content         ; Set this variable in behaviour.nls when the bus wants to send a message. This will be the message sent.
  disable_tick    ; tick value when the bus send a message for a discussion he initiated. Prevents spamming 
  
  ;Belief variables
  overcrowded_station; List of [station_id,ticks when message received]: when receiving a request to deviate to an overcrowded station , can't send the same message during a period of time
  overcrowded_line   ; List of [route, ticks when message received]: same as before
  message_to_send    ; if comm_intention = "send", the bus will send this message to message_receivers
  message_receivers  ; List of all bus id to whom the message has to be sent 
  station_to_drop    ; Id of the station that a bus wants to drop. If none, set to -1
  station_to_drop_heur; Variation of heuristics obtained if the bus drops the station
  last_reply_time     ; Keep track of the tick of the last replied message. Can not drop a station if I replied during this frame pr the previous one 
  last_request_time   ; Keep track of the tick of the last requested message. Used for the bus addition
    
  add_bus_index      ; keep track of the index of the bus we added. This is used to send him a message to initialize it; = to -1 if none
  add_size           ; The desired size of the bus we want to add 
  
  add_fixed_route    ; variable to init a new bus
  add_deviate_route  ; variable to init a new bus
  add_start_delay    ; variable to init a new bus
  add_direction      ; variable to init a new bus
  add_route_index    ; variable to init a new bus
  add_desire         ; variable to init a new bus
  add_drive_intention; variable to init a new bus
  add_next_deviate_intention; variable to init a new bus
  add_comm_intention ; variable to init a new bus
  add_addbus_intention; variable to init a new bus
    
  next_maintain_intention; When a bus ends his maintain, this will be his new drive intention
  next_wait_intention; When a bus ends his wait, this will be his new drive intention
  new_drive_intention; Used when the bus is replying to a message. This intention will be his new drive_intention if he "wins" the request.
  next_deviate_intention ; When a bus ends his deviate route, this will be his new drive intention
  deviate_route      ; This is the route that the bus will follow when he is deviating from its main fixed_route
  new_fixed_route    ; This is the new fixed route that the bus will follow when we wins the request. He might first have to take the deviate route in order to reach this one.
  
  start_delay        ; set a delay to initiated bus so that they do not all leave centraal station at the same moment 
  last_sent_request  ; keep track of the last request message I sent

  ] 

; added global variable : bus_number, bus_id_list, average distance travelled
; bus_deserving_stations: List of list of the bus id  of bus deserving station i //This variable is global but is constructed thanks to local knowledge ! (Blackboard system)
; hourly_passenger_location: memorize in a list of list the estimated number of passenger at a stop given the time (in hour)
; init_num_bus_per_line: for convienience and parameter optimization. this number is fixed 
; message_overcrow_delay: for convienience: this number is fixed and used for overcrowded_station and overcrowded_line
; tracked_passenger is a global variable ONLY used for optimization. It contains [passenger_ID current_bus_ID(-1 if no current bus) current_station]
; connect_route: fixed route used by connect buses to assure connection between lines 
globals [graph bus_number bus_real_number bus_id_list bus_deserving_stations hourly_passenger_location init_num_bus_per_line message_overcrow_delay tracked_passenger connect_route]


;TODO: change ticks<60 in behaviour overcrowded line 
 to init-buses
   if not is-list? tracked_passenger  
   [
     set tracked_passenger  (list 21283 -1 -1) ; from 0 to 42775
   ]
  ;bus comes from bus_init 
  ifelse(ticks < 3)
  [
      ;constant 
    if(init_num_bus_per_line = 0)
    [set init_num_bus_per_line 2]
    
    if(message_overcrow_delay = 0)
    [set message_overcrow_delay 30]
    
    if(connect_route = 0)
    [set connect_route [1 7 13 22 12]]
    if overcrowded_station = 0
    [
      set overcrowded_station (list)
    ]
    if overcrowded_line = 0
    [
      set overcrowded_line (list)
    ]
    
    
     ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
    set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
    
    ; Initialize your agents here.
    if bus_id mod 7 = 0 [set fixed_route [3 9 8 6 8 2]]
    if bus_id mod 7 = 1 [set fixed_route [3 20 12 15 18]]
    if bus_id mod 7 = 2 [set fixed_route [3 20 21 22 0]]
    if bus_id mod 7 = 3 [set fixed_route [3 4 10 13 23 14]]
    if bus_id mod 7 = 4 [set fixed_route [3 4 5 17 7 1 19]]
    if bus_id mod 7 = 5 [set fixed_route [3 16 11]] 
    if bus_id mod 7 = 6 [set fixed_route connect_route] 
    
    ;set a delay so that the buses are equally distributed over the line 
    let line_length (compute-route-length fixed_route)
    let nb_bus_on_this_line (floor ((bus_id - 24) / 6) )
    set start_delay ( nb_bus_on_this_line * 2 * line_length / init_num_bus_per_line)
    
    if(bus_deserving_stations = 0 )
    [
      set bus_deserving_stations (list)
      let i 0 
      while [i < 24]
      [
        set bus_deserving_stations lput (list) bus_deserving_stations
        set i (i + 1)
      ]
    ]
    if(bus_id mod 7 != 6)
    [set bus_deserving_stations (update-bus-deserving-stations bus_deserving_stations bus_id fixed_route)]
    
    set direction "GO"
    set route_index 1
    set next_stop -1
    
   if bus_type = 1 [set bus_capacity 12 set bus_cost 6000]
   if bus_type = 2 [set bus_capacity 60 set bus_cost 12000]
   if bus_type = 3 [set bus_capacity 150 set bus_cost 20000]  
   
    ifelse bus_id mod 7 = 6 [
        set color blue
        set desire "deserve" 
        set drive_intention "deviate"
        set deviate_route [3 20 21 22]
        set next_deviate_intention "connect"
        set new_fixed_route fixed_route
    ]
    [
    set desire "deserve" 
    set drive_intention "deserve"
    ] 
    set comm_intention "none"
    set addbus_intention "none"
    
    set message_receivers (list)
   
    set add_bus_index -1
    set station_to_drop -1
    set last_request_time -10
    
    set last_sent_request ""
    
  ]
  ;bus was created because another bus asked for it. In order to init, wait for him to receive an init message 
  [
    ;do nothing until receive an init message 
    set fixed_route []
    set start_delay 0
    ;do not forget to update  set bus_deserving_stations (update-bus-deserving-stations bus_deserving_stations bus_id fixed_route)

    set direction "GO"
    set route_index -1
    set next_stop -1
    
    if bus_type = 1 [set bus_capacity 12 set bus_cost 6000]
    if bus_type = 2 [set bus_capacity 60 set bus_cost 12000]
    if bus_type = 3 [set bus_capacity 150 set bus_cost 20000]
    
    set desire "" 
    set drive_intention "" 
    set comm_intention ""
    set addbus_intention "init" ; flag to ask for initialization
    
    set message_receivers (list)
    set overcrowded_station (list)
    set overcrowded_line (list)
    
    set add_bus_index -1
    set station_to_drop -1
    set last_request_time -10
     
    set last_sent_request ""
    set bus_id_list lput (bus_real_number + 24) bus_id_list
    set bus_real_number (bus_real_number + 1)
  ]

end

to drop-pass[current_route drop_all?]
  ;if drop_all? or at centraal or on connect line : drop everyone
  ifelse(drop_all? = true or(current_stop = 3 ) or(member? current_stop connect_route) )
  [
    let test length(bus_passengers)
        foreach bus_passengers [
        drop-off-passenger (item 0 ?)
      ]
  ]
  [
    ;if current station of passenger: drop
    if(member? current_stop current_route)
    [
      ; drop a passenger if it is his stop or at a station where a bus can direclty drive him to its destination
      foreach bus_passengers [
        let passenger_at_stop? (item 1 ? = current_stop)
        let drop_for_connection? (drop-for-connection current_stop (item 1 ?) bus_id bus_deserving_stations)
        if passenger_at_stop? or drop_for_connection?
        [drop-off-passenger (item 0 ?)] 
      ]
    ]
  ]

end
to drop-connect[current_route]
  ;if station = 22 : drop everyone 
  if(current_stop = 22)
  [
      foreach bus_passengers [
        drop-off-passenger (item 0 ?)
      ]
  ]
  foreach bus_passengers [
  ;if exist bus connection current stop to desire stop: drop
    if(connecting-stations current_stop (item 1 ?))
    [
      drop-off-passenger (item 0 ?)
    ]
  ]
end
to pick-pass[current_route]
  foreach get-passengers-at-stop (current_stop) 
  [
    if length(bus_passengers) < bus_capacity 
    [
      ;if at connecting stations ie station 3 or on connect_route: pick if can drop on current line 
      ifelse(current_stop = 3 or (member? current_stop connect_route))
      [
        let v ?
        ; if at station 22 and no bus can connect directly 22 to desired destination, pick him in order to bring it to station 3
        ; this ensure than no one stay stucked on the connect route
        ifelse(current_stop = 22)
        [
          let bring_to_centraal true
          ;check if a bus connect one of the station of connect_route to destination
          foreach(connect_route)
          [
            set bring_to_centraal (bring_to_centraal and (not connecting-stations ? (item 1 v)))
          ]
          if (bring_to_centraal) 
          [
            pick-up-passenger (item 0 v)
            ;if(bus_id = 30)
            ;[show (word "pick " (item 0 v) " bring to centraal") ]
          ]
        ]
        [
          ;check if can drop the passenger on the line
          foreach current_route 
          [
            let can_drop_on_line ((item 1 v = ?) and (? != current_stop) )
            if can_drop_on_line 
            [ pick-up-passenger (item 0 v) 
            ]
          ]
        ]
      ]
      [     
        let bus_that_can_connect (bus-on-superline -1 (list current_stop (item 1 ?)) bus_deserving_stations)
        ;pick if I can lead him to destination or if no other buses can
        if(length(bus_that_can_connect) = 0 or (member? bus_id bus_that_can_connect))
        [
          pick-up-passenger (item 0 ?)
        ]
      ]
    ]
  ]
end
to pick-connect[current_route]
  foreach get-passengers-at-stop (current_stop) [
    if length(bus_passengers) < bus_capacity 
    [
        let v ?
        let connect_on_line? false
        let from_this_stop? false
        let from_stop -1
        ;check if a bus connect one of the station of connect_route to destination
        foreach(connect_route)
        [
          if(connecting-stations ? (item 1 v))
          [
             set connect_on_line? true
             set from_stop ?
             if(? = current_stop)
             [set from_this_stop? true]
          ]
        ]
        if(from_this_stop?)
        [set from_stop current_stop]
      ;pick if no bus can lead from current station to destination
      let bus_that_can_connect (bus-on-superline -1 (list from_stop (item 1 v)) bus_deserving_stations)
      if( ((item 1 v) != current_stop ) and ((connect_on_line? and not from_this_stop?) or (not connect_on_line? and current_stop != 22) or (member? bus_id bus_that_can_connect)))
      [
        pick-up-passenger (item 0 v)
      ]
    ]
  ]
end

to execute-actions 

  ifelse(start_delay > 0)
  [
    set start_delay (start_delay - 1 )
  ]
  [
    ; initialize bus_id_list
    if(bus_id_list) = 0 [set bus_id_list (list)]
    
    ;answer time is 1 ticks from this one , the whole conversation last 3 ticks (counting this one)
    ;filtered message
    let f_messages (retrieve-recent inbox ticks 4)
    ;Read all messages and apply the changes
    update-message-intentions f_messages
    
    if(addbus_intention != "init")
    [
      update_desire
      update_addbus_intention
      update_drive_intention
      update_comm_intention f_messages
    ]
    
    
    ;send message 
    if(comm_intention = "send")
    [
      ;show word word word "send " message_to_send " to " message_receivers
      foreach message_receivers
      [my-send-message ? (message_to_send)]
    ]
    
    if(addbus_intention = "addinit")
    [
      ; initialize (init_num_bus_per_line * 6) buses pet line at the beginning
      let i 0
      while [i < (init_num_bus_per_line * 6 + 1)] [
        if bus_number != 0 [add-bus(3)]
        set bus_id_list lput (bus_number + 24) bus_id_list
        set bus_number bus_number + 1
        set bus_real_number bus_number
        set i i + 1
      ]
    ]
    if(addbus_intention = "add")
    [
      ; add more bus as time increases
      add-bus(add_size)
      ;set bus_id_list lput (bus_number + 24) bus_id_list
      
      set add_bus_index (bus_number + 24)
      
      set bus_number (bus_number + 1)
      set addbus_intention "none"
    ]
    if(drive_intention = "none")
    [
      ;do nothing
    ]
    if(drive_intention = "wait"  )
    [
      ;if we are at a stop: do not drive, drop everyone if needed
      ifelse(current_stop != -1)
      [
         drop-pass fixed_route true ;drop everyone
      ]
      ;drive until next stop
      [
        travel-to item route_index fixed_route 
      ]
     ]
    if(drive_intention = "connect" or (drive_intention = "maintain" and next_maintain_intention = "connect") )
    [
      ; check whether a bus is in a bus stop
      if (current_stop = (item route_index fixed_route) ) [
        if(previous_stop != -1) [
          set travelled_distance travelled_distance + my-get-distance previous_stop current_stop
        ]
        ;compute next stop
        let break? false
        
        ;update index and direction 
        let next_dir_index (get-next-direction-index bus_id false)
        set direction (item 0 next_dir_index)
        set route_index (item 1 next_dir_index)
        if(route_index = -1)
        [show "WARNING1 route_index = -1 "]
        drop-connect fixed_route
        pick-connect fixed_route
      ]
      travel-to item route_index fixed_route 
    ]
    if(drive_intention = "deserve" or (drive_intention = "maintain" and next_maintain_intention != "connect") )
    [   
          if(route_index = "-1" or (route_index = -1))
      [show word "init? " addbus_intention]
      ; check whether a bus is in a bus stop
      if (current_stop = (item route_index fixed_route) ) [
        if(previous_stop != -1) [
          set travelled_distance travelled_distance + my-get-distance previous_stop current_stop
        ]
        ;compute next stop
        let break? false
        
        ;update index and direction 
        let next_dir_index (get-next-direction-index bus_id false)
        set direction (item 0 next_dir_index)
        set route_index (item 1 next_dir_index)
        if(route_index = -1)
        [show "WARNING1 route_index = -1 "]
        drop-pass fixed_route false
        pick-pass fixed_route
      ]
      travel-to item route_index fixed_route 
    ]
    if(drive_intention = "deviate")
    [
      ; check whether a bus is in a bus stop
      ;if the bus stop is the first of the deviate route, drop everyone
      if(current_stop = item 0 deviate_route)
      [
         drop-pass deviate_route true
      ]
      if current_stop = item route_index deviate_route 
      [
        if(previous_stop != -1) [
          set travelled_distance (travelled_distance + my-get-distance previous_stop current_stop)
        ]
        
        ;update index and direction 
        let next_dir_index (get-next-direction-index bus_id false)
        set direction (item 0 next_dir_index)
        set route_index (item 1 next_dir_index)
        if(route_index = -1)
        [show "WARNING2 route_index = -1 "]
        ;only drop passenger 
        drop-pass deviate_route false
      ]
      if(route_index < length(deviate_route))
      [travel-to item route_index deviate_route]
    ]
  ]
  
  

  
  
  ;Keep track of where a specific passenger is 
  if ((item 1 tracked_passenger) = -1) and ((item 2 tracked_passenger) = -1)
    [
      if (bus_id = 24) ;execute only once per tick
      [
        let i 0
        while [i < 24]
        [
         foreach (get-passengers-at-stop i)
         [
           if ((item 0 ?) = (item 0 tracked_passenger))
           [
            set tracked_passenger (replace-item 2 tracked_passenger i)
            let passenger item (item 0 tracked_passenger) passengers
            show (word "Found passenger at station " i " going to "  (item 3 passenger)" "ticks)
           ]
         ]
         set i (i + 1)
          
        ]
        
      ] 
    ]
  if ((item 1 tracked_passenger) = -1)
      [
        let pas_in_bus? false
        foreach (bus_passengers)
        [
          if((item 0 tracked_passenger) = (item 0 ?))
          [set pas_in_bus? true]
        ]
        if(pas_in_bus? = true)
        [
          show (word "Picked up passenger at station " (item 2 tracked_passenger) " " ticks)
          set tracked_passenger (replace-item 1 tracked_passenger bus_id)
          set tracked_passenger (replace-item 2 tracked_passenger -1)
        ]
      ]
  if (bus_id = (item 1 tracked_passenger))
    [
      let pas_in_bus? false
      foreach (bus_passengers)
      [
        if((item 0 tracked_passenger) = (item 0 ?))
        [set pas_in_bus? true]
      ]
      if(pas_in_bus? = false)
      [
        let cur_stop current_stop
        if(current_stop = -1)
        [set cur_stop previous_stop]
        set tracked_passenger (replace-item 2 tracked_passenger cur_stop)
        set tracked_passenger (replace-item 1 tracked_passenger -1)
        let passenger item (item 0 tracked_passenger) passengers
        ifelse (item 2 tracked_passenger) = (item 3 passenger)
        [
          show (word "Passenger arrived at station " (item 3 passenger) " " (item 6 passenger)" " ticks)
        ]
        [
          show (word "Dropped at station " (item 2 tracked_passenger) " " ticks)
        ]
      ]
    ]
  if  (bus_id = (item 1 tracked_passenger) and (current_stop != -1))
    [
      let pas_in_bus? false
      foreach (bus_passengers)
      [
        if((item 0 tracked_passenger) = (item 0 ?))
        [set pas_in_bus? true]
      ]
      if(pas_in_bus? = true)
      [
        show(word "At station " current_stop " " ticks)
      ]
    ]
end



