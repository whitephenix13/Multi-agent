;the main heuristic that let a bus decide if he should do something or not 
;day_time given in ticks

to-report travel-gain[my_bus_type route]

  let mean_travel_cost -1250000 ;-175000 
  let cost_per_patch 0
  if my_bus_type = 1 
  [set cost_per_patch 1]
   if my_bus_type = 2 
  [set cost_per_patch 1.5]
   if my_bus_type = 3 
  [set cost_per_patch 2]
  
  let route_length (compute-route-length route)
    
  report ( cost_per_patch * route_length) / mean_travel_cost
end 

to-report passenger-gain[route day_time _bus_deserving_stations]

  let mean_time 420
  let time_importance 4
  let bus_speed 1
  let stop_per_person 4.25;mean number of stop per person 
  let distance_stops 6.32; mean distance between two stops
  
  let expected_people (compute-expected-people route day_time _bus_deserving_stations);
  
  let people_per_day 42776; the total number of people per day 
  report (time_importance  * (stop_per_person * distance_stops) / bus_speed  * expected_people / people_per_day) / mean_time 
end

to-report heuristic[my_bus_type route day_time _bus_deserving_stations]
  let H 0 
  let travel_g (travel-gain my_bus_type route)
  let pass_g (passenger-gain route day_time _bus_deserving_stations)
  
  set H (pass_g + travel_g)
  report H 

end

;to-report check-overcrowded-station [bus_stop]
  ;let bus_deserve_ids item bus_stop bus_deserving_stations
  ;let total_remaining_seat 0
  ;let res 0
  ;foreach bus_deserve_ids [
  ;  set total_remaining_seat (total_remaining_seat + remaining-bus-capacity ?)
 ; ]
  ;ifelse( length(get-passengers-at-stop bus_stop) > total_remaining_seat) [
  ;  set res bus_stop
  ;] 
  ;[
  ;  set res false
 ; ]
 ; report res
;end

to-report check-overcrowded-station [bus_stop bus_size current_routes]
  ;Reports a station which is overcrowded or false if none 
  ;take into account the bus size for tolerance 
  ;add param bus_size, current_routes
  let alpha 1.5
  ;let tol 80
  let tol (1 / length(current_routes) ) * bus_size * alpha ; TODO: manually tune this
  ;show tol 
  
  if ((hourly_passenger_location = 0))
  [
    report false
  ]
  let expected-people (compute-expected-people (list bus_stop) ticks bus_deserving_stations)
  ifelse (expected-people > tol)
  [
      report bus_stop
  ]
  [
    report false
  ]
  
end


to-report is-uncrowded [station current_ticks bus_size current_routes]
    ;let tol 20 ; TODO: manually tune this 
    let alpha 0.7
    let tol (1 / length(current_routes)) * bus_size * alpha ; TODO: manually tune this
    ;show tol 
    
    ;get expected number of people per bus for the next hour 
    let expected-people (compute-expected-people (list station) current_ticks bus_deserving_stations)
    ;if expected number of people is under tolerance and length(bus_deserving_stations) > 1 ;ie: I'm not the only bus 
    ;add station_id and expected people to the list 
    if (expected-people < tol) and (length(item station bus_deserving_stations) > 1) and (station != 3)
    [
      report (list true expected-people)
    ]
    report (list false -1)
end

to-report check-uncrowded-station [route bus_size current_ticks]
  ;Reports a station to remove or -1 if none :WARNING: NEVER REMOVE CENTRAAL STATION (index=3) FIND ANOTHER STATION IF THE MIN IS CENTRAAL
  let l_id (list)
  let l_value (list)
  let res -1
  
  if ((hourly_passenger_location = 0) or (length(route) < 3))
  [
    report -1
  ]
  
  foreach route
  [
    let uncrowded_res (is-uncrowded ? current_ticks bus_size route )
    if (item 0 uncrowded_res)
    [
      set l_id lput ? l_id
      set l_value lput (item 1 uncrowded_res) l_value
    ]
  ]
  ;find min value of l_value
  ;find min index value of l_value:
  ;find corresponding station_id 
  if(length(l_value) > 0)
  [
    let min_val min l_value
    let min_idx position min_val l_value
    set res (item min_idx l_id)
  ]
  report res
end


to-report check-overcrowded-line [bus_route bus_size]
  let percentage ( 50 / 100)
  let max_overcrowded_stop floor(length(bus_route) * percentage)
  let res 0
  let counter 0
  foreach bus_route [
    if( (check-overcrowded-station ? bus_size bus_route) != false)
    [
      set counter (counter + 1)
    ]
  ]
  ifelse(counter > max_overcrowded_stop) [
    set res bus_route
  ] 
  [
    set res false
  ]
  report res
end

to-report check-uncrowded-line [bus_route bus_size]
  let percentage ( 100 / 100)
  let max_uncrowded_stop floor(length(bus_route) * percentage)
  let res 0
  let counter 0
  foreach bus_route [
    if( item 0 (is-uncrowded ? ticks bus_size bus_route))
    [
      set counter (counter + 1)
    ]
  ]
  ifelse(counter >= max_uncrowded_stop) [
    set res bus_route
  ] 
  [
    set res false
  ]
  report res
end


to-report not-abandoning-station[_cur_route _n_route]
  foreach _cur_route
  [
    if ((length(item ? bus_deserving_stations)) = 1)
    [
      if ((member? ? _n_route) = false)
      [report false]
    ] 
  ]
  report true
end

to-report remaining-bus-capacity [b_id]
  let remaining_seat 0
  ask buses with [bus_id = b_id] [
    let total_passenger length(bus_passengers)
    let capacity bus_capacity
    set remaining_seat (bus_capacity - total_passenger)
  ]
  report remaining_seat
end


to-report parse-hourly-passenger-location[]
  file-open "hourly_passengers_location.csv"
  let hour 0
  let matrix (list) ; list of list of people, use hour then station id to access the element
  while [not file-at-end?]
  [
    let line file-read-line
    let people_at_station ( split line ";") ; for hour, the i'th item is the number of people at station i 
    let l_hour (list)
    foreach people_at_station
    [
      set l_hour lput (read-from-string ?) l_hour
    ]
    set matrix lput l_hour matrix
  ]
  file-close
  report matrix
end

to-report compute-expected-people[route day_time _bus_deserving_stations]
  ; Compute sum of people at stop / number of bus deserving this stop
  ;convert day_time that is in tick to hour time 
  let hour ((floor (day_time / 60) ) mod 24)
  let a (1 - ((day_time / 60) mod 1)) ; get how much we take of hour
  let b (1 - a) ; get how much we take from (hour + 1)
  
  if (hourly_passenger_location = 0)
  [
    set hourly_passenger_location parse-hourly-passenger-location
  ]
  let _sum 0
  let encountered_stop (list) ; avoid to count twice a stop if it is twice in the route
  foreach route
  [
      if( not (member? ? encountered_stop) )
      [
        let num_pass_at_stop 0 ; = a * num_pass_at_stop_h1 + b * num_pass_at_stop_h2
        let num_pass_at_stop_h1 (item ? (item hour hourly_passenger_location))
        let num_pass_at_stop_h2 0
        ifelse(hour != 23)
        [
         set num_pass_at_stop_h2 (item ? (item (hour + 1) hourly_passenger_location))
        ]
        [
          set num_pass_at_stop_h2 0
        ]
        ;interpolate between current hour and next hour
        set num_pass_at_stop (a * num_pass_at_stop_h1 + b * num_pass_at_stop_h2)
        
        let num_bus_deserving_stop (length (item ? _bus_deserving_stations) )
        set _sum (_sum + num_pass_at_stop / num_bus_deserving_stop)
        set encountered_stop lput ? encountered_stop
      ]
  ] 
  report _sum; 
end