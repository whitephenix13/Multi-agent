;the main heuristic that let a bus decide if he should do something or not 
;day_time given in ticks
to-report heuristic[my_bus_type route day_time]
  let H 0 
  
  let cost_per_patch 0
  if my_bus_type = 1 
  [set cost_per_patch 1]
   if my_bus_type = 2 
  [set cost_per_patch 1.5]
   if my_bus_type = 3 
  [set cost_per_patch 2]

  let mean_time 420
  let mean_travel_cost 175000 
  let time_importance 2
  let bus_speed 1
  let stop_per_person 1; TODO: mean number of stop per person 
  let distance_stops 1; TODO: distance between two stops
  
  let expected_people 1;TODO: the expected number of people at a bus stop 
  ;TODO: = sum of people at stop / number of bus deserving this stop
  
  let people_per_day 1; TODO: the total number of people per day 
  let route_length 1 ;TODO
  
  set H ( time_importance * mean_time * bus_speed / (stop_per_person * distance_stops)  * expected_people / people_per_day - mean_travel_cost * cost_per_patch * route_length)
  report H 

end

to-report check-overcrowded-station [bus_stop]
  ;TODO:
  let bus_deserve_ids item bus_stop bus_deserving_stations
  let total_remaining_seat 0
  let res 0
  foreach bus_deserve_ids [
    set total_remaining_seat (total_remaining_seat + remaining-bus-capacity bus_deserve_ids)
  ]
  ifelse(get-passengers-at-stop bus_stop > total_remaining_seat) [
    set res bus_stop
  ] 
  [
    set res false
  ]
  report res
end

to-report check-overcrowded-line [bus_route]
  ;TODO:
  ;for now, we determine n equals 2
  let n 3
  let res 0
  let counter 0
  foreach bus_route [
    let bus_deserve_ids item ? bus_deserving_stations
    let total_remaining_seat 0
    foreach bus_deserve_ids [
      set total_remaining_seat (total_remaining_seat + remaining-bus-capacity bus_deserve_ids)
    ]
    if(get-passengers-at-stop ? > total_remaining_seat) [
      set counter (counter + 1)
    ] 
  ]
  ifelse(counter > n) [
    set res bus_route
  ] 
  [
    set res false
  ]
  report res
end

to-report remaining-bus-capacity [b_id]
  let remaining_seat 0
  ask buses with [bus_id = b_id] [
    let total_passenger length(bus_passengers)
    let capacity bus_capacity
    set remaining_seat (bus_capacity - total_passenger)
  ]
  report remaining_seat
end

; calculate average travelled distance
to-report calculate-average-travelled-distance
  let average_distance 0
  foreach bus_id_list [
    ask buses with [bus_id = ?] [
      set average_distance average_distance + travelled_distance
    ]
  ]
  if(length(bus_id_list) != 0) [ set average_distance (average_distance / length(bus_id_list)) ]
  report average_distance
end
